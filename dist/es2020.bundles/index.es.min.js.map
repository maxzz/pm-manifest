{"version":3,"file":"index.es.min.js","sources":["../../src/mani-types.ts","../../src/transforms/transform-valuelife.ts","../../src/transforms/transform-xml-enc.ts","../../src/transforms/transform-time.ts","../../src/transforms/transform-path.ts","../../src/transforms/transform-mani-pool.ts","../../node_modules/fast-xml-parser/src/util.js","../../node_modules/fast-xml-parser/src/validator.js","../../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","../../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","../../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js","../../node_modules/strnum/strnum.js","../../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","../../node_modules/fast-xml-parser/src/xmlparser/node2json.js","../../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","../../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","../../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js","../../node_modules/fast-xml-parser/src/fxp.js","../../src/io/mani-i.ts","../../src/io/mani-show-error.ts","../../src/utils/json2xml.ts","../../src/io/mani-o.ts","../../src/transforms/url.ts","../../src/utils/uuid.ts","../../src/io/file-to-meta.ts"],"sourcesContent":["/**\r\n * Object.entries() type support\r\n */\r\nexport type Entries<T> = {\r\n    [K in keyof T]: [K, T[K]];\r\n}[keyof T][];\r\n\r\nexport module Mani {\r\n    export type FieldTypeStr = 'edit' | 'button' | 'list' | 'combo' | 'check' | 'radio' | 'text';\r\n\r\n    export interface Field {\r\n        displayname?: string,\r\n        type: FieldTypeStr;\r\n        dbname?: string;\r\n        path_ext?: string;\r\n        policy?: string;        // this is standard rule: \"[p4]g:8:8:withspecial:different_ap\"\r\n        policy2?: string;       // this is custom rule like: \"[e1]g:(a{4,4}d{2,2}A{1,1}[@#$%!]{1,1})&lt;8,8&gt;\"; both can present at the same time\r\n\r\n        value?: string;\r\n        choosevalue?: string;\r\n\r\n        askalways?: boolean,    // \"1\"\r\n        onetvalue?: boolean,    // \"1\"\r\n\r\n        password?: boolean,     // \"1\"\r\n        submit?: boolean,       // \"1\"\r\n        useit?: boolean,        // \"1\"\r\n\r\n        rfield?: 'in' | 'out';\r\n        rfieldindex?: number;   // \"2\"\r\n        rfieldform?: string;    // refs from login form\r\n\r\n        controltosubmitdata?: boolean;\r\n        ids?: string;\r\n        options?: string;\r\n    }\r\n\r\n    export enum FORMNAME {      // predefined form names\r\n        noname = -1,\r\n        signon = 0,\r\n        pchange = 1,\r\n        fieldcatalog = -2,\r\n    }\r\n\r\n    export interface FContext {\r\n        type: 'pchange';\r\n        name: number;           // \"1\"\r\n    }\r\n\r\n    export interface Detection {\r\n        caption?: string;\r\n        web_ourl?: string;\r\n        web_murl?: string;\r\n        web_qurl?: string;\r\n        web_checkurl?: boolean; // \"1\"\r\n        dlg_class?: string;\r\n        names_ext?: string;\r\n        processname?: string;\r\n        commandline?: string;\r\n    }\r\n\r\n    export interface Options {\r\n        choosename?: string;\r\n        sidekick?: string;      // \"manual mode hint\"\r\n        ownernote?: string;\r\n        quicklink?: string;     // QL menu name\r\n        auth_pl?: string;       // policy\r\n        balooncount?: string;\r\n        autoprompt?: string;    // boolean\r\n        lockfields?: string;    // \"0\" | \"1\"\r\n        submittype?: string;    // \"dosubmit\" | \"nosubmit\"\r\n        iconkey?: string;       // Any name not necessarily unique\r\n        iconlocation?: string;  // Format is the same as described into feedback_drawing.h. \"Q:0:0:0\"\r\n        usequicklink?: string;  // (\"1\" | \"usequicklink\") | (\"2\" | \"dontusequicklink\")\r\n        recheckwindowafterfillin?: string; // boolean\r\n        qlwocred?: string;      // boolean. Quick reauthentication enable/disable\r\n    }\r\n\r\n    export interface Form {\r\n        fcontext?: FContext;\r\n        detection: Detection;\r\n        options: Options;\r\n        fields: Field[];\r\n    }\r\n\r\n    export interface Descriptor {\r\n        id: string;             // \"{fe94ea4f-ac76-4f7d-9c74-fa14abca889b}\"\r\n        created: string;        // \"1d57495 61c6f733\"\r\n        modified: string;       // \"1d57496 87bed3e8\",\r\n        integrity?: string;     // \"OTS2.056a41167041b1ea2c529494aeb606d0e\"\r\n        version: string;        // \"2.4.3\"\r\n    }\r\n\r\n    export namespace Customization {\r\n        export interface Process {\r\n            name: string;       // process name like 'outlook.exe'\r\n            type: string;       // 'skip'\r\n        }\r\n        export interface Options {\r\n            processes: Process[];\r\n        }\r\n    }\r\n\r\n    export interface Manifest {\r\n        descriptor: Descriptor;\r\n        options?: Customization.Options;\r\n        forms: Form[];\r\n    }\r\n\r\n} //module Mani\r\n\r\n// Catalog\r\n\r\nexport module Catalog {         // pmat/include/ots_storagecatalog_io.h\r\n    export interface Descriptor {\r\n        id?: string;            // default as guid\r\n    }\r\n\r\n    export interface Name {\r\n        dispname: string;\r\n        dbname: string;\r\n        value?: string;\r\n        ownernote?: string;\r\n        askalways?: boolean;    // undefined : '1' \r\n        onetvalue?: boolean;    // undefined : '1'\r\n        password?: boolean;     // undefined : '1'\r\n    }\r\n\r\n    export interface Root {\r\n        descriptor?: Descriptor;\r\n        names: Name[];\r\n    }\r\n}\r\n\r\nexport type CatalogItem =       // Item in memory w/ meta information\r\n    Catalog.Name\r\n    & {\r\n        index: number;          // index in loaded file.\r\n        uuid: number;           // local (in memory only) unique ID (not updated through one session).\r\n        mru: number;            // most recently used timestamp (as uuid but updated on each use through one session)\r\n        newItem?: boolean;      // just for edit dialog: flag set when new item created so we scroll it into view and reset after scroll done\r\n    };\r\n\r\nexport type FieldCatalog = {\r\n    items: CatalogItem[];\r\n};\r\n\r\nexport module MPath {           // Meta path. Manifest unpacked path data\r\n\r\n    export interface p4a {      // Chunk: p4a (from: unpack_fromstring())\r\n        rnumber: number;\r\n        roleString: string;\r\n        className: string;\r\n        name?: string;\r\n    }\r\n\r\n    export type p4 = p4a;       // Chunk: p4\r\n\r\n    export interface sid {      // Chunk: sid\r\n        version: string;\r\n        generatedId: string;\r\n        formName: string;\r\n        formAttrs?: string;\r\n        outerHtml?: string;\r\n    }\r\n\r\n    export interface did2 {     // Chunk: did2\r\n        s1: string;\r\n        s2: string;\r\n        s3: string;\r\n        s4?: string;\r\n    }\r\n\r\n    export interface loc {      // Chunk: loc (size is in client area or against 1920x1200 or 1600x1200?)\r\n        x: number;\r\n        y: number;\r\n        w: number;\r\n        h: number;\r\n        f?: number;             // 0 | 1 if the last element in field (this is internal and not saved).\r\n        i?: number;             // index of rect before dedupe (this is internal and not saved).\r\n    }\r\n\r\n    export interface sn {       // Chunk: sn\r\n        total: number;          // total blocks\r\n        current: number;        // current block\r\n        parts: string[];        // block parts\r\n    }\r\n\r\n} //module MPath\r\n\r\nexport module Meta {            // Manifest unpacked forms, as meta data\r\n\r\n    export interface Path {     // Collection of path items (chunks)\r\n        p4a?: MPath.p4a[];\r\n        p4?: MPath.p4[];\r\n        loc?: string;           // \"x y w h | x y w h ... | x y w h\"\r\n        sid?: MPath.sid;\r\n        did2?: string;\r\n        sn?: MPath.sn;          // script number\r\n    }\r\n\r\n    export type Chunk = keyof Meta.Path; //type ChunkName = 'p4a' | 'p4' | 'loc' | 'sid' | 'did2' | 'sn';\r\n\r\n    export interface Field {\r\n        mani: Mani.Field,\r\n        ftyp: FieldTyp,\r\n        life: ValueLife;\r\n        path: Path;\r\n        pidx: number;           // index in the form\r\n        ridx: number;           // for preview index in form.view.rects (or -1 if no found, but it should never happens if view exist)\r\n    }\r\n\r\n    export interface Disp {     // Display information about form\r\n        domain?: string;        // Form website domain if website.\r\n        isScript: boolean;      // Form has at least one script field.\r\n        noFields: boolean;      // Form has no fields, i.e. excluded website.\r\n        isIe: boolean;          // Form detection processname contains 'iexplore.exe' i.e. login was trained with IE as (manual or normal and this depends on isScript).\r\n        bailOut?: string[];     // Manifest needs extra attention\r\n    }\r\n\r\n    export interface Bounds {\r\n        x1: number;             // x1,y1 ┌──────┐\r\n        y1: number;             //       │      │\r\n        x2: number;             //       └──────┘ x2,y2\r\n        y2: number;\r\n    }\r\n\r\n    export interface View {\r\n        rects: MPath.loc[];\r\n        bounds: Bounds;\r\n    }\r\n\r\n    export interface Form {\r\n        mani: Mani.Form;\r\n        type: number;           // 0 - login; 1 - password change\r\n        disp: Disp;\r\n        pool: string[];\r\n        view?: View;            // view exists only for IE and win32\r\n        fields: Field[];        // each item corresponds to each field\r\n        rother: number[];       // array of ridx from another form, i.e for form.type 0 its rects indices of form.type 1, and vice versa\r\n    }\r\n\r\n} //module Meta\r\n\r\n/*\r\nC:\\Y\\c\\dp\\pm\\Components\\Include\\oti_manifest_valuelife.h:\r\nC:\\Y\\w\\2-web\\0-dp\\pmat-org-c++\\c++\\oti_manifest_valuelife.h\r\n    namespace valuelife\r\n    {\r\n        // onetvalue stands for one_time_value; undefined means constant or reference\r\n        //\r\n        typedef enum {undefined, constant=undefined, askreuse, askconfirm, askalways} type_t;\r\n        /*\r\n        if (!onetvalue && !askalways) then \"ask reuse\"\r\n        if (!onetvalue &&  askalways) then \"ask confirm\"\r\n        if ( onetvalue &&  askalways) then \"ask always\"\r\n        if ( onetvalue && !askalways) then \"ask always\" //this is illigal combination if value is empty, and will be mapped to type_t::askalways because value is empty\r\n        * /\r\n        inline type_t cast(bool isvalueempty_, bool manifest_askalways_, bool manifest_onetvalue_)\r\n        {\r\n            return isvalueempty_ ? (manifest_onetvalue_ ? askalways : (manifest_askalways_ ? askconfirm : askreuse)) : undefined;\r\n        }\r\n        inline void cast(const type_t v_, bool isvalueempty_, bool& manifest_askalways_, bool& manifest_onetvalue_)\r\n        {\r\n            if (isvalueempty_)\r\n                switch (v_)\r\n                {\r\n                  //case illigal   : manifest_askalways_ = false, manifest_onetvalue_ = true;  break;\t// if it is one_time_value then we'll askalways\r\n                    case undefined : manifest_askalways_ = false, manifest_onetvalue_ = false; break;\t// value is a reference from field catalog\r\n                    case askreuse  : manifest_askalways_ = false, manifest_onetvalue_ = false; break;\t// value will be asked and saved, if value is empty\r\n                    case askconfirm: manifest_askalways_ = true,  manifest_onetvalue_ = false; break;\t// value is saved but need to be confirmed allways\r\n                    case askalways :\r\n                    default:         manifest_askalways_ = true,  manifest_onetvalue_ = true;  break;\t// value is not saved so ask allways\r\n                }\r\n            else\r\n                manifest_askalways_ = false, manifest_onetvalue_ = false; // equals to type_t::askreuse\t// value is a reference from fc, reference, or constant.\r\n        }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  // in case of constant or reference manifest_askalways_, manifest_onetvalue_ are ignored,\r\n        // cast without value\t\t\t\t\t\t\t\t\t\t\t  // and value is not saved (we just don't save password, or constants to ps)\r\n        //\r\n        inline type_t cast(bool manifest_askalways_, bool manifest_onetvalue_)\t\t\t\t\t\t\t// cast from manifest\r\n        {\r\n            return cast(true, manifest_askalways_, manifest_onetvalue_);\r\n        }\r\n        inline void cast(const type_t v_, bool& manifest_askalways_, bool& manifest_onetvalue_)\t\t\t// cast to manifest\r\n        {\r\n            return cast(v_, true, manifest_askalways_, manifest_onetvalue_);\r\n        }\r\n    } //namespace valuelife\r\n\r\nC:\\Y\\c\\dp\\pm\\Components\\SharedResources\\Localization\\xresources_referencenames_en-US.rc:\r\nC:\\Y\\w\\2-web\\0-dp\\pmat-org-c++\\c++\\xresources_referencenames_en-US.rc:\r\n    STRINGTABLE\r\n    BEGIN\r\n        IDS_DEF_REFNAMES_0\t\t\"name=1\\nupnname=2\\nfullname=3\\ndomain=4\\ne-mail=5\\npassword=6|password=1\\next_quest_c@query@nohist=7|both=1\\next_quest_cp@query@nohist=8|password=1\\next_vip_p@pv@noui=9|password=1\\next_vip_potp@id@noui=10|password=1\\n\"\r\n\r\n        IDS_DEF_REFNAMES_1\t\t\"1=Windows User Name\"\r\n        IDS_DEF_REFNAMES_2\t\t\"2=Windows User Principal Name\"\r\n        IDS_DEF_REFNAMES_3\t\t\"3=Windows Domain\\\\User Name\"\r\n        IDS_DEF_REFNAMES_4\t\t\"4=Windows Domain\"\r\n        IDS_DEF_REFNAMES_5\t\t\"5=Windows E-mail Address\"\r\n        IDS_DEF_REFNAMES_6\t\t\"6=Windows User Password\"\r\n        IDS_DEF_REFNAMES_7\t\t\"7=Defender One-time Password\"\r\n        IDS_DEF_REFNAMES_8\t\t\"8=Defender One-time Password + Windows User Password\"\r\n        IDS_DEF_REFNAMES_9\t\t\"9=User Password\"\r\n        IDS_DEF_REFNAMES_10\t\t\"10=User Password + VIP One-time Password\"\r\n    END\r\n\r\nC:\\Y\\c\\dp\\pm\\Components\\PMAT\\DpoTrain\\Localization\\DpoTrain_en-US.rc:\r\n    IDS_WIZ_FIELD_WRITEONLY \"Write Only\"\r\n\r\nC:\\Y\\c\\dp\\pm\\Components\\PMAT\\DpoTrainMgr\\include\\adminmanagmentwkg_referencenames.h:\r\n    // 3. Use static list of references. Last alternative. \r\n    if (references.empty())\r\n    {\r\n        references = L\"name=Windows User Name\\nupnname=Windows User Principal Name\\nfullname=Windows Domain\\\\User Name\\ndomain=Windows Domain\\ne-mail=Windows E-mail Address\\npassword=Windows User Password|password=1\\next_quest_c@query@nohist=Defender One-time Password|both=1\\next_quest_cp@query@nohist=Defender One-time Password + Windows User Password|password=1\\next_vip_p@pv@noui=User Password|password=1\\next_vip_potp@id@noui=User Password + VIP One-time Password|password=1\\n\";\r\n    }\r\n\r\n    name=Windows User Name\\n\r\n    upnname=Windows User Principal Name\\n\r\n    fullname=Windows Domain\\\\User Name\\n\r\n    domain=Windows Domain\\n\r\n    e-mail=Windows E-mail Address\\n\r\n    password=Windows User Password|password=1\\n\r\n\r\n    ext_quest_c@query@nohist=Defender One-time Password|both=1\\n\r\n    ext_quest_cp@query@nohist=Defender One-time Password + Windows User Password|password=1\\n\r\n    ext_vip_p@pv@noui=User Password|password=1\\n\r\n    ext_vip_potp@id@noui=User Password + VIP One-time Password|password=1\\n\r\n*/\r\n\r\nexport const enum ValueAs {\r\n    askReuse,\r\n    askConfirm,\r\n    askAlways,\r\n}\r\n\r\nexport const LIST_valueAskNames = [\"Ask - Resuse\", \"Ask - Confirm\", \"Ask Always \",];\r\n\r\nexport type ValueLife = {\r\n    valueAs: ValueAs;           // how to treat value from user\r\n    value?: string;             // key in 'references' if started with '@' otherwise it's a constant value\r\n    isRef?: boolean;            // true if value started with '@' but not '@@'\r\n\r\n    fType?: FieldTyp;           // now it has type psw and edit/psw/rest information\r\n  //isPsw?: boolean;            // it comes from field.password, and not from ref @password (ref should reflect field type not opposite).\r\n  //isBtn?: boolean;            // any type but not edit or password\r\n    isNon?: boolean;            // true when value is empty and valueAs is default AskReuse, but input cleared by user\r\n};\r\n\r\nexport type ReferenceItem = { i: number; f: string; s: string; }; // i - index; f - full name; s - short name.\r\n\r\nexport type References = {\r\n    txt: Record<string, ReferenceItem>;\r\n    psw: Record<string, ReferenceItem>;\r\n};\r\n\r\nexport const LIST_references: References = {\r\n    txt: {\r\n        name:     /**/ { i: 0, f: \"Windows User Name\",           /**/ s: \"User Name\" },\r\n        upnname:  /**/ { i: 1, f: \"Windows User Principal Name\", /**/ s: \"User Principal Name\" },\r\n        fullname: /**/ { i: 2, f: \"Windows Domain\\\\User Name\",   /**/ s: \"Domain\\\\User Name\" },\r\n        domain:   /**/ { i: 3, f: \"Windows Domain\",              /**/ s: \"Windows Domain\" },\r\n        \"e-mail\": /**/ { i: 4, f: \"Windows E-mail Address\",      /**/ s: \"Windows Email\" },\r\n    },\r\n    psw: {\r\n        password: { i: 0, f: \"Windows User Password\", s: \"Windows Password\" },\r\n    },\r\n};\r\n\r\n/*\r\n    const enum FieldType {       // This is internal type used by Bkg and Cs, but these definitions are close to DPAgent definitions.\r\n        uni = 0,                 // Uninitialized\r\n        txt = 1,                 // Field is unprotected input control.\r\n        psw = 2,                 // Field is password.\r\n        btn = 3,                 // Field is button (possibly to submit).\r\n        chk = 4,                 // Field is checkbox field.\r\n        // The rest is for compatibility to match manifest definitions.\r\n        rad = 5,                 // Field is radiobox\r\n        lst = 6,                 // Field is list as select field.\r\n        cmb = 7,                 // drop down field aka combobox, in many cases it will be a regular edit controll. For manifest::FIELDTYPE::combo\r\n        lab = 8,                 // text for match. The item for corresponding to manifest::FIELDTYPE::text.\r\n        irr = 9,                 // The field type is irrelevant for us, but used (only internally) as a position placeholder in CS form.\r\n    }\r\n*/\r\n\r\n/**\r\n * Our UI internal type\r\n */\r\nexport enum FieldTyp { //type FieldTypeStr = 'edit' | 'button' | 'list' | 'combo' | 'check' | 'radio' | 'text';\r\n    und, // undefined\r\n    edit,\r\n    button,\r\n    list,\r\n    combo,\r\n    check,\r\n    radio,\r\n    text,\r\n\r\n    psw, // combined value 'edit' and 'password'\r\n}\r\n\r\nexport function fieldTyp4Str(field: Mani.Field): FieldTyp { // Convert FieldTyp from string\r\n    let rv = FieldTyp[field.type] || FieldTyp.und;\r\n    return rv === FieldTyp.edit && field.password ? FieldTyp.psw : rv;\r\n}\r\n\r\n// Submit\r\n\r\n/*\r\n    Form:\r\n    namespace SUBMITTYPE {\r\n        enum type_t {\r\n            undefined = 0,\t\t// For old manifests its undefined\r\n            dosubmit,\t\t\t// Force submit data, even if submit is not mutched or not detected\r\n            nosubmit,\t\t\t// Don't submit data. This is statement by User or Admin.\r\n        };\r\n\r\n        inline string_t toString(const SUBMITTYPE::type_t& v_) {\r\n            const char* rv;\r\n            switch (v_) {\r\n                case SUBMITTYPE::undefined: rv = \"undefined\"; break;\r\n                case SUBMITTYPE::dosubmit: rv = \"dosubmit\"; break;\r\n                case SUBMITTYPE::nosubmit: rv = \"nosubmit\"; break;\r\n                default: return sformat(\"NEW %d\", (unsigned int)v_);\r\n            }\r\n            return rv;\r\n        }\r\n    }\r\n\r\n    Field:\r\n    class field_t {\r\n        bool controltosubmitdata; // This is a former submit. This is mark of control to submit data, not a button mark how it was impropriety used everywhere.\r\n    ...\r\n    }\r\n\r\n    bool is_controltosubmitdata() const\r\n    {\r\n        // The control is used to submit data only if both are true. It may be applied not only to button controls.\r\n        // If controltosubmitdata is true it does not mean that it will be used to submit data.\r\n        // Starting from Personal 3.0.0 (Pro 4.3) we are using combination useit and controltosubmitdata.\r\n        // This combination may be applied to any control in theory, but so far we are going to use it for\r\n        // edit and button controls only.\r\n        //\r\n        return controltosubmitdata && useit;\r\n    }\r\n\r\n*/\r\n\r\nexport const enum SUBMIT {\r\n    dosumbit = 'dosumbit',\r\n    nosumbit = 'nosumbit',\r\n}\r\n","import { CatalogItem, FieldTyp, Mani, ValueAs, ValueLife, fieldTyp4Str } from \"../mani-types\";\r\n\r\nexport namespace TransformValue {\r\n\r\n    type valueLife4ManiLogicParams = {\r\n        askalways?: boolean;\r\n        onetvalue?: boolean;\r\n        value?: string;\r\n        password?: boolean;\r\n        fType: FieldTyp;\r\n    };\r\n\r\n    export function valueLife4ManiLogic({ askalways, onetvalue, value, password, fType }: valueLife4ManiLogicParams): ValueLife {\r\n        const vl: ValueLife = {\r\n            valueAs:\r\n                (!onetvalue && !askalways)\r\n                    ? ValueAs.askReuse\r\n                    : (!onetvalue && askalways)\r\n                        ? ValueAs.askConfirm\r\n                        : ValueAs.askAlways, // legal:(onetvalue && askalways) and illegal:(onetvalue && !askalways)\r\n            ...(password && { isPsw: true }),\r\n            //...(field.type !== 'edit' && field.type !== 'combo' && { isBtn: true }),\r\n            fType: fType,\r\n        };\r\n        if (value) {\r\n            vl.isRef = value?.charAt(0) === '@';\r\n            vl.value = value?.replace(/^@/, '');\r\n            vl.isRef = vl.isRef && !!vl.value && vl.value.charAt(0) !== '@'; // case for '@@'\r\n        }\r\n        return vl;\r\n    }\r\n\r\n    export function valueLife4Mani(field: Mani.Field): ValueLife {\r\n        const { askalways, onetvalue, value, password } = field;\r\n        return valueLife4ManiLogic({ askalways, onetvalue, value, password, fType: fieldTyp4Str(field) });\r\n    }\r\n\r\n    export function valueLife4Catalog(item: CatalogItem): ValueLife {\r\n        const { askalways, onetvalue, value, password } = item;\r\n        const fType = item.password ? FieldTyp.psw : FieldTyp.edit;\r\n        return valueLife4ManiLogic({ askalways, onetvalue, value, password, fType });\r\n    }\r\n\r\n    export type valueLife2ManiLogicReturn = {\r\n        onetvalue?: boolean;\r\n        askalways?: boolean;\r\n        value?: string;\r\n    };\r\n\r\n    export function valueLife2ManiLogic(vl: ValueLife, rv: valueLife2ManiLogicReturn): void {\r\n        const { valueAs: va } = vl;\r\n        va === ValueAs.askReuse\r\n            ? (rv.onetvalue = undefined, rv.askalways = undefined)\r\n            : va === ValueAs.askConfirm\r\n                ? (rv.onetvalue = undefined, rv.askalways = true)\r\n                : (rv.onetvalue = true, rv.askalways = true);\r\n        vl.value ? (rv.value = `${vl.isRef ? '@' : (vl.value.charAt(0) === '@' ? '@' : '')}${vl.value}`) : (delete rv.value);\r\n    }\r\n\r\n    export function valueLife2Mani(vl: ValueLife, rv: Mani.Field | CatalogItem): void {\r\n        valueLife2ManiLogic(vl, rv);\r\n    }\r\n\r\n} //namespace TransformValue\r\n\r\n//TODO: skip recording of '=== undefined' values\r\n","export namespace TransformEncoding { // encode/decode functions\r\n\r\n    export function removeEscapeChars(s: string, escapeChar: string): string {\r\n        // 0. '\\1\\\\ab\\2\\.3' --> '1\\ab2.3' with escapeChar: '\\' i.e. remove non duplicated.\r\n        return s; // TODO: //C:\\Y\\git\\pm\\Include\\atl\\atl_strings.h::removeEscapeChars()\r\n    }\r\n\r\n    function swapKeyValPairs<T extends object>(obj: T) {\r\n        return Object.fromEntries(Object.entries(obj).map(([key, val]) => [val, key]));\r\n    }\r\n\r\n    // C++\r\n\r\n    const forwardCpp = {\r\n        \"^up;\": \"^\",\r\n        \"^at;\": \"@\",\r\n        \"^dot;\": \".\",\r\n        \"^2dot;\": \":\",\r\n        \"^escape;\": '\\x1b',\r\n        \"%0d\": \"\\r\",\r\n        \"%0a\": \"\\n\",\r\n    };\r\n    const reverseCpp = swapKeyValPairs(forwardCpp);\r\n    const reForwardCpp = /(\\^up;|\\^at;|\\^dot;|\\^2dot;|\\^escape;|%0d|%0a)/g; // regex.lastIndex specifies the index at which to start the next match, not for replace all.\r\n    const reReverseCpp = /[\\^@\\.:\\x1b\\r\\n]/g;\r\n\r\n    export function cppRestore(s: string): string { // C:\\Y\\c\\dp\\pm\\Components\\Include\\atl\\atl_strings.h::cpp_restore()\r\n        return s ? s.replace(reForwardCpp, (m) => forwardCpp[m as keyof typeof forwardCpp]) : '';\r\n    }\r\n\r\n    export function cppEscape(s: string): string {\r\n        return s ? s.replace(reReverseCpp, (m) => reverseCpp[m]) : '';\r\n    }\r\n\r\n    export function colonEscape(s: string): string { // this is used for matching url options\r\n        return s ? s.replace(/:/g, '^2dot;') : '';\r\n    }\r\n\r\n    // XML\r\n\r\n    const forwardXml = {\r\n        \"&lt;\": \"<\",\r\n        \"&gt;\": \">\",\r\n        \"&amp;\": \"&\",\r\n        \"&quot;\": \"\\\"\",\r\n        \"&apos;\": \"\\'\",\r\n        \"%0d\": \"\\r\",\r\n        \"%0a\": \"\\n\",\r\n    };\r\n    const reverseXml = swapKeyValPairs(forwardXml);\r\n    const reForwardXml = /(&lt;|&gt;|&amp;|&quot;|&apos;|%0d|%0a)/g;\r\n    const reReverseXml = /[<>&\"'\\r\\n]/g;\r\n\r\n    export function xmlRestore(s: string): string { //C:\\Y\\c\\dp\\pm\\Components\\Include\\atl\\atl_strings.h::xml_remove()\r\n        return s ? s.replace(reForwardXml, (m) => forwardXml[m as keyof typeof forwardXml]) : '';\r\n    }\r\n\r\n    export function xmlEscape(s: string): string {\r\n        return s ? s.replace(reReverseXml, (m) => reverseXml[m]) : '';\r\n    }\r\n\r\n    // Persent encoding\r\n\r\n    export function persentRemove(s: string): string {\r\n        // decodeURI will fail on: &lt;input name=&quot;Sign in name&quot; tabindex=&quot;1&quot; id=&quot;signInName&quot; type=&quot;email&quot; placeholder=&quot;Email Address&quot; pattern=&quot;^[a-zA-Z0-9.!#$%&amp;amp;’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$&quot; value=&quot;&quot;&gt;\r\n        try {\r\n            return decodeURI(s); //TODO: decodeURI does not do all % encodings //TODO: decodeURI will not work on URL params\r\n        } catch (error) {\r\n            return s;\r\n        }\r\n    }\r\n\r\n} //namespace TransformEncoding\r\n","export namespace TimeUtils {\r\n\r\n    function fileTimeToDate(fileTime?: number | string): Date {\r\n        /**\r\n         * fileTimeToDate()\r\n         * Convert a Windows FILETIME to a Javascript Date\r\n         * @param {number} fileTime - the number of 100ns\r\n         * intervals since January 1, 1601 (UTC)\r\n         * @returns {Date}\r\n         **/\r\n        if (typeof fileTime === 'string') {\r\n            fileTime = fileTime ? Number('0x' + fileTime.split(' ').join('')) : 0; // dwHighDateTime + ' ' + dwLowDateTime \r\n        }\r\n        return !!fileTime ? new Date(fileTime / 10000 - 11644473600000) : new Date;\r\n    }\r\n    \r\n    function filetimeFromDate(date: Date): number {\r\n        return date.getTime() * 1e4 + 116444736000000000;\r\n    }\r\n    \r\n    export function dpTimeToShow(fileTime?: number | string): string {\r\n        if (fileTime) {\r\n            const d = fileTimeToDate(fileTime).toLocaleString();\r\n            const m = /^(\\d\\d??)\\/(\\d\\d??)\\/(\\d\\d\\d\\d), (\\d\\d??):(\\d\\d??):(\\d\\d?)([\\s\\S]*$)/.exec(d);\r\n            m && [1, 2, 4, 5, 6].forEach((idx) => m[idx] = zeros(m[idx], 2));\r\n            return m ? `${m[1]}.${m[2]}.${m[3]} ${m[4]}:${m[5]}:${m[6]} ${m[7]}` : d;\r\n        }\r\n        return '';\r\n    }\r\n    \r\n    function zeros(v: string | number, total: number): string {\r\n        // Returns v prefixed with '0's with length <= total or v as is.\r\n        v = v ? '' + v : '';\r\n        return v.length < total ? '0000000000'.slice(0, total - v.length) + v : v;\r\n    }\r\n    \r\n} //namespace TimeUtils\r\n","import { MPath, Meta } from \"../mani-types\";\r\nimport { TransformEncoding } from \"./transform-xml-enc\";\r\nimport { getPoolName } from \"./transform-mani-pool\";\r\n\r\nexport namespace FieldPath {\r\n    function p4a(pool: string[], s: string): MPath.p4a {\r\n        let ss = s.split('.');\r\n        let rv: MPath.p4a = {\r\n            rnumber: 0,\r\n            roleString: getPoolName(pool, ss[1]),\r\n            className: TransformEncoding.cppRestore(getPoolName(pool, ss[2])),\r\n            name: TransformEncoding.cppRestore(getPoolName(pool, ss[3]))\r\n        };\r\n        return rv;\r\n    }\r\n\r\n    function sid(pool: string[], v: string): MPath.sid {\r\n        let sid = {} as any;\r\n        v.split('.').forEach((_, index) => {\r\n            let s = TransformEncoding.cppRestore(getPoolName(pool, _));\r\n            switch (index) {\r\n                case 0: sid.version = s; break;\r\n                case 1: sid.generatedId = s; break;\r\n                case 2: sid.formName = s; break;\r\n                case 3: sid.formAttrs = s; break;\r\n                case 4: sid.outerHtml = s; break;\r\n                default: sid[index] = s;\r\n            }\r\n        });\r\n        return sid;\r\n    }\r\n\r\n    export namespace loc {\r\n        export function unPool(pool: string[], v: string): string[] {\r\n            return (v.split('|').map(idx => getPoolName(pool, idx)));\r\n        }\r\n\r\n        function str2loc(v: string): MPath.loc {\r\n            let [x, y, x2, y2] = v.split(' ').map(str => +str);\r\n            return { x, y, w: x2 - x, h: y2 - y };\r\n        }\r\n\r\n        function loc2str(loc: MPath.loc): string {\r\n            return `${loc.x} ${loc.y} ${loc.x + loc.w} ${loc.y + loc.h}`;\r\n        }\r\n\r\n        export namespace utils {\r\n            export function rectsBoundaries(rects: MPath.loc[]): Meta.Bounds {\r\n                let x1 = Number.MAX_SAFE_INTEGER;\r\n                let y1 = Number.MAX_SAFE_INTEGER;\r\n                let x2 = 0;\r\n                let y2 = 0;\r\n                rects.forEach(({ x, y, w, h }) => {\r\n                    if (x1 > x) {\r\n                        x1 = x;\r\n                    }\r\n                    if (y1 > y) {\r\n                        y1 = y;\r\n                    }\r\n                    if (x2 < x + w) {\r\n                        x2 = x + w;\r\n                    }\r\n                    if (y2 < y + h) {\r\n                        y2 = y + h;\r\n                    }\r\n                });\r\n                return { x1, y1, x2, y2 };\r\n            }\r\n\r\n            export function buildPreviewData(fields: Meta.Field[]): Meta.View {\r\n                let uniqueLocs = new Set<string>();\r\n\r\n                fields.forEach((field) => { //console.log(`field.path.loc: ${field.path.loc}`);\r\n                    const fieldLocs = (field.path.loc || '').split('|');\r\n                    fieldLocs.forEach(loc => uniqueLocs.add(loc));\r\n                    field.ridx = fieldLocs[fieldLocs.length - 1] as any; // temp store string as number\r\n                });\r\n\r\n                let rects = Array.from(uniqueLocs).map(str2loc).filter(loc => loc.w || loc.h);\r\n                let bounds = rectsBoundaries(rects);\r\n\r\n                const rectStrs = rects.map(loc2str);\r\n                fields.forEach((field) => {\r\n                    field.ridx = rectStrs.findIndex((locStr) => locStr === field.ridx as any); // restore str to number\r\n                    rects[field.ridx] && (rects[field.ridx].f = 1);\r\n                });\r\n\r\n                return { rects, bounds, };\r\n            }\r\n        } //namespace utils\r\n    } //namespace loc\r\n\r\n    function getChunks(path: string): [Meta.Chunk, string][] {\r\n        // [p4a]0.0.1.|0.2.1.[loc]b|c[sid]14.15.16..17 -> ['p4a', '0.0.1.|0.2.1.'], ['loc', 'b|c'], ['sid', '14.15.16..17']\r\n        return path.split('[').filter(Boolean).map((val: string) => val.split(']') as [Meta.Chunk, string]);;\r\n    }\r\n\r\n    export function fieldPathItems(pool: string[], path: string): Meta.Path {\r\n        const rv: Meta.Path = {};\r\n        const chunks: [Meta.Chunk, string][] = getChunks(path);\r\n\r\n        chunks.forEach(([chunkName, chunkValue]) => {\r\n            switch (chunkName) {\r\n                case 'p4a':\r\n                case 'p4': {\r\n                    rv.p4a = chunkValue.split('|').map(_ => p4a(pool, _));\r\n                    break;\r\n                }\r\n                case 'loc': {\r\n                    rv.loc = loc.unPool(pool, chunkValue).join('|');\r\n                    break;\r\n                }\r\n                case 'sid': {\r\n                    rv.sid = sid(pool, chunkValue);\r\n                    break;\r\n                }\r\n                case 'did2': {\r\n                    rv.did2 = chunkValue;\r\n                    break;\r\n                }\r\n                case 'sn': {\r\n                    rv.sn = {\r\n                        total: 0,\r\n                        current: 0,\r\n                        parts: [],\r\n                    };\r\n                    let ss = chunkValue.split(';');\r\n                    if (ss.length) {\r\n                        let first = ss[0].split('.'); // '3.0.the-rest'\r\n                        if (first.length > 2) {\r\n                            rv.sn.total = +first[0];\r\n                            rv.sn.current = +first[1];\r\n                            ss[0] = first[2];\r\n                        }\r\n                        rv.sn.parts = ss.filter(Boolean);\r\n                    }\r\n                    break;\r\n                }\r\n                default: {\r\n                    console.log('??????path??????');\r\n                }\r\n            }\r\n        });\r\n\r\n        return rv;\r\n    }\r\n} //namespace FieldPath\r\n","import { Mani } from \"../mani-types\";\r\nimport { TransformEncoding } from \"./transform-xml-enc\";\r\n\r\n// Manifest specific functions\r\n\r\nexport function getPool(form: Mani.Form): string[] {\r\n    return form && form.detection && form.detection.names_ext ? form.detection.names_ext.split(':') : [];\r\n}\r\n\r\nexport function getPoolName(pool: string[], index: string): string {\r\n    if (!index) {\r\n        return '';\r\n    }\r\n    let n: number = index !== '' ? parseInt(`0x${index}`, 16) : -1;\r\n    if (n < pool.length && n >= 0) {\r\n        return TransformEncoding.removeEscapeChars(pool[n], '\\\\');\r\n    }\r\n    return '????????????';\r\n}\r\n","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","const util = require('../util');\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (util.isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n\nmodule.exports = readDocType;\n","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + \".\" + this.options.cdataPropName, true, false, true);\n          // if(!val) val = \"\";\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);\n          if(val == undefined) val = \"\";\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) { //TODO: namespace\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, tagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${tagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n    tagExp = tagExp.substr(separatorIndex + 1);\n  }\n\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node\n    } else if (jObj[key] === null) {\n      if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup ){\n            listTagVal += this.j2x(item, level + 1).val;\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level)\n          }\n        } else {\n          listTagVal += this.buildTextValNode(item, key, '', level);\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, '', level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    if (attrStr && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix)) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","import { XMLParser } from 'fast-xml-parser';\r\nimport { Catalog, Mani } from '../mani-types';\r\nimport { TransformEncoding } from '../transforms';\r\n//import test from '../../assets/{ff06f637-4270-4a0e-95a3-6f4995dceae6}.dpm';\r\n\r\nexport function beautifyXMLManifest(manifest: Mani.Manifest): Mani.Manifest {\r\n    // 0. convert XML .dpm object to manifest format.\r\n\r\n    manifest.descriptor = (manifest.descriptor as any)?._attributes || {};\r\n    manifest.forms = (manifest.forms as any)?.form || [];\r\n\r\n    if (!Array.isArray(manifest.forms)) {\r\n        manifest.forms = [manifest.forms];\r\n    }\r\n\r\n    manifest.forms.forEach((form: Mani.Form) => {\r\n        // Remove _attributes\r\n        form.fcontext && (form.fcontext = (form.fcontext as any)._attributes);\r\n        form.detection && (form.detection = (form.detection as any)._attributes);\r\n        form.options && (form.options = (form.options as any)._attributes);\r\n\r\n        if (form.fields) {\r\n            let fields = (form.fields as any).field as Mani.Field[];\r\n            form.fields = Array.isArray(fields) ? fields : [fields];\r\n        }\r\n\r\n        // Perform typecast\r\n        if (form.fcontext) {\r\n            form.fcontext.name !== undefined && (form.fcontext.name = +form.fcontext.name);\r\n        }\r\n        if (form.detection) {\r\n            form.detection.web_checkurl !== undefined && (form.detection.web_checkurl = !!form.detection.web_checkurl);\r\n        }\r\n        if (form.fields) {\r\n            form.fields = form.fields.map(field => (field as any)._attributes);\r\n\r\n            form.fields.forEach((field: Mani.Field) => {\r\n                field.password && (field.password = !!field.password);\r\n                field.submit && (field.submit = !!field.submit);\r\n                field.useit && (field.useit = !!field.useit);\r\n                field.rfieldindex && (field.rfieldindex = +field.rfieldindex);\r\n            });\r\n        }\r\n    });\r\n\r\n    if (manifest.options?.processes) {\r\n        manifest.options.processes = (manifest.options.processes as any).process || [];\r\n        if (!Array.isArray(manifest.options.processes)) {\r\n            manifest.options.processes = [manifest.options.processes];\r\n        }\r\n        manifest.options.processes = manifest.options.processes.map((process) => (process as any)._attributes);\r\n    }\r\n\r\n    return manifest as Mani.Manifest;\r\n}\r\n\r\nexport function beautifyXMLCatalog(catalog: Catalog.Root): Catalog.Root {\r\n    catalog.names = (catalog as any)?.names?.name || [];\r\n    catalog.names = catalog.names.map((item: any) => item?._attributes).filter(Boolean);\r\n    return catalog;\r\n}\r\n\r\nexport const parseOptionsRead = {\r\n    attributeNamePrefix: \"\",\r\n    attributesGroupName: \"_attributes\",\r\n    ignoreAttributes: false,\r\n    allowBooleanAttributes: true,\r\n};\r\n\r\nexport type ParseManifestResult = {\r\n    mani?: Mani.Manifest;\r\n    fcat?: Catalog.Root;\r\n};\r\n\r\nexport function parseXMLFile(cnt: string): ParseManifestResult {\r\n    const parser = new XMLParser(parseOptionsRead);\r\n    const obj = parser.parse(cnt); //console.log('%craw', 'color: green', JSON.stringify(obj, null, 4));\r\n    return {\r\n        mani: obj?.manifest && beautifyXMLManifest(obj.manifest),\r\n        fcat: obj?.storagecatalog && beautifyXMLCatalog(obj?.storagecatalog),\r\n    };\r\n}\r\n\r\nexport namespace Matching {\r\n    export enum Style {         // cannot use const w/ esbuild\r\n        undef = 0,\r\n        makeDomainMatch = 1,    // That means match the url as string (i.e. not regex or wildcard). this should have prefix '[m0]:1:0:', but unfortunately it is used without prefix as raw murl.\r\n        regex = 2,\r\n        wildcard = 3,\r\n        skipDomainMatch = 4,    // This is exactly string content match i.e. skip domain match. this should have prefix '[m0]:4:0:'\r\n    }\r\n\r\n    export enum Options {       // cannot use const w/ esbuild\r\n        undef = 0,\r\n        caseinsensitive = 0x0001, // This option does not make sense for URLs (even for wildcards).\r\n        matchtext = 0x0002,       // match text or don't; This option does not make sense for URLs.\r\n        usequery = 0x0004,        // match text or don't; This option does not make sense for URLs.\r\n        pmacSet = 0x0008,         // set manually by pmac utility.\r\n    }\r\n\r\n    export type RawMatchData = {\r\n        style: Style;\r\n        opt: Options;\r\n        url: string;\r\n    };\r\n\r\n    export const reUrlMatchCheck = /^\\[m0\\]\\:.\\:.\\:/;   // this regex to quickly check the start of url if any matching is set\r\n    //export const reUrlMatchRegex = /^\\[m0\\]\\:3\\:.\\:/; // this can be 3 or 8: /^\\[m0\\]\\:8\\:.\\:/   // this regex to quickly check the start of url if regex matching is set\r\n    export const addPrefixRegex = '[m0]:3:8:';          // this prefix is to add the start of url as regex match to exclude from DomainMatch\r\n\r\n    const reOtsMatching = /^\\[m0\\]:([0-4]):([01248ace]{1,4}):\\s*(.+)/; // 0: [m0]; 1:style; 2:options; 3:pattern. Example: web_murl=\"[m0]:2:2:https^2dot;//maxzz.github.io/test-pm/\"\r\n\r\n    export function getMatchRawData(murl: string): RawMatchData {\r\n        let rv = { style: Style.undef, opt: Options.undef, url: murl || '', }; // don't need call restoreCpp(murl) here.\r\n        let m = murl?.match(reOtsMatching); // TODO: do we need to resrt reOtsMatching.lastIndex before match?\r\n        if (m) {\r\n            rv.style = +m[1] as Style; // style\r\n            rv.opt = +m[2] as Options; // options\r\n            rv.url = TransformEncoding.cppRestore(m[3]); // pattern\r\n        }\r\n        return rv;\r\n    }\r\n\r\n    export function makeRawMatchData({ style, opt, url }: RawMatchData, ourl: string): string {\r\n        url = (style !== Style.undef ? url || '' : ourl).trim();\r\n        return style !== Style.undef || opt !== Options.undef ? `[m0]:${style}:${opt}:${TransformEncoding.colonEscape(url)}` : url;\r\n    }\r\n\r\n    function styleName(style: number): string {\r\n        const names: Record<number, string> = {\r\n            1: 'use domain match',            // Style.makeDomainMatch\r\n            2: 'regex',                       // Style.regex\r\n            3: 'wildcard',                    // Style.wildcard\r\n            4: 'don\\'t match this in domain', // Style.skipDomainMatch\r\n        };\r\n        return names[style] || `${style}`;\r\n    }\r\n\r\n    export function getMatchInfo(murl: string): { prefix: string; join: string; url: string; } | undefined {\r\n        const raw = getMatchRawData(murl);\r\n        if (raw.style || raw.opt) {\r\n            const { style, opt, url } = raw;\r\n\r\n            let resOpt = [];\r\n            (opt & 1) !== 0 && (resOpt.push('case insensitive'));   // Options.caseinsensitive\r\n            (opt & 2) !== 0 && (resOpt.push('match ext.'));         // Options.matchtext\r\n\r\n            let resStyle = styleName(style);\r\n            return {\r\n                prefix: `[m0]:${style}:${opt}`,\r\n                join: `${resStyle}${resOpt.length ? `; Options: ${resOpt.join(', ')}` : ''}`,\r\n                url,\r\n            };\r\n        }\r\n    }\r\n\r\n} //namespace Matching\r\n","export function showError(error: any) {\r\n    console.log('%ctm-error:\\n', 'color: red', error);\r\n}\r\n","type J2xOptions = {\r\n    attributeNamePrefix: string;\r\n    attributesGroupName: false | string;\r\n    textNodeName: string;\r\n    ignoreAttributes: boolean;\r\n    cdataTagName: string;\r\n    cdataPositionChar: string;\r\n    format: boolean;\r\n    indentBy: string;\r\n    supressEmptyNode: boolean;\r\n    tagValueProcessor: (tagValue: string | any) => string;\r\n    attrValueProcessor: (attrValue: string | any, attrName: string) => string;\r\n\r\n    rootNodeName?: string;\r\n\r\n    doReduceEmptyValues: boolean;   // Reduce attrs closing on empty values.            true: <field /> false: <field></field>\r\n    doAttrsIndent: boolean;         // Attribute indentation.                           true: <field \\nattr ... \\nattr /> false: <field attr attr />\r\n    doAttrsEndingIndent: boolean;   // Attrs ending indented. valid if doAttrsIndent is true. true: <field ... \\n/> false: <field ... />\r\n};\r\ntype J2xOptionsOptional = Partial<J2xOptions>;\r\n\r\nfunction buildOptions(options: J2xOptionsOptional, defaultOptions: J2xOptions, props: (keyof J2xOptions)[]): J2xOptions {\r\n    if (!options) {\r\n        return defaultOptions; //if there are not options\r\n    }\r\n\r\n    //parse Empty Node as self closing node\r\n    let newOptions: J2xOptionsOptional = {};\r\n    for (let i = 0; i < props.length; i++) {\r\n        const key = props[i];\r\n        (newOptions as any)[key] = options[key] !== undefined ? options[key] : defaultOptions[key];\r\n    }\r\n    return newOptions as J2xOptions;\r\n};\r\n\r\nconst defaultOptions: J2xOptions = {\r\n    attributeNamePrefix: '@_',\r\n    attributesGroupName: false,\r\n    textNodeName: '#text',\r\n    ignoreAttributes: true,\r\n    cdataTagName: '',\r\n    cdataPositionChar: '\\\\c',\r\n    format: false,\r\n    indentBy: '  ',\r\n    supressEmptyNode: false,\r\n    tagValueProcessor: function (a: any): string { return '' + a; },\r\n    attrValueProcessor: function (a: any): string { return '' + a; },\r\n\r\n    doReduceEmptyValues: false,\r\n    doAttrsIndent: true,\r\n    doAttrsEndingIndent: true,\r\n};\r\n\r\nconst props: (keyof J2xOptions)[] = [\r\n    'attributeNamePrefix',\r\n    'attributesGroupName',\r\n    'textNodeName',\r\n    'ignoreAttributes',\r\n    'cdataTagName',\r\n    'cdataPositionChar',\r\n    'format',\r\n    'indentBy',\r\n    'supressEmptyNode',\r\n    'tagValueProcessor',\r\n    'attrValueProcessor',\r\n\r\n    'rootNodeName', //when array as root\r\n\r\n    'doReduceEmptyValues',\r\n    'doAttrsIndent',\r\n    'doAttrsEndingIndent',\r\n];\r\n\r\n// const doReduceEmptyValues = false;  // Reduce attrs closing on empty    values true: <field /> false: <field></field>\r\n// const doAttrsIndent = true;         // Attribute indentation            true: <field \\nattr ... \\nattr /> false: <field attr attr />\r\n// const doAttrsEndingIndent = false;  // Attrs ending indented            true: <field ... \\n/> false: <field ... />\r\n\r\nexport class J2xParser {\r\n    options: J2xOptions;\r\n    attrPrefixLen: number;\r\n    isAttribute: (name: string) => boolean | string;\r\n    isCDATA: (s: string) => boolean;\r\n    replaceCDATAstr: (str: string, cdata: any) => string;\r\n    replaceCDATAarr: (str: string, cdata: any) => string;\r\n\r\n    textofTextValNode: (val: string, key: string, attrStr: string[], level: number) => string;\r\n    textofObjectNode: (val: string, key: string, attrStr: string[], level: number) => string;\r\n\r\n    indentate: (n: number) => string;\r\n    tagEndChar: string = '>\\n';\r\n    newLine: string = '\\n';\r\n\r\n    constructor(options?: J2xOptionsOptional) {\r\n        this.options = buildOptions(options || {}, defaultOptions, props);\r\n        if (this.options.ignoreAttributes || this.options.attributesGroupName) {\r\n            this.attrPrefixLen = 0;\r\n            this.isAttribute = () => false;\r\n        } else {\r\n            this.attrPrefixLen = this.options.attributeNamePrefix.length;\r\n            this.isAttribute = isAttribute;\r\n        }\r\n\r\n        this.isCDATA = this.options.cdataTagName ? isCDATA : () => false;\r\n\r\n        this.replaceCDATAstr = _replaceCDATAstr;\r\n        this.replaceCDATAarr = _replaceCDATAarr;\r\n\r\n        if (this.options.format) {\r\n            this.indentate = indentate;\r\n            this.tagEndChar = '>\\n';\r\n            this.newLine = '\\n';\r\n        } else {\r\n            this.indentate = () => '';\r\n            this.tagEndChar = '>';\r\n            this.newLine = '';\r\n        }\r\n\r\n        this.textofTextValNode = this.options.supressEmptyNode ? this._textofTextNode : this._textofTextValNodeWithoutEmptyCheck;\r\n        this.textofObjectNode = this.options.supressEmptyNode ? this._textofObjNode : this._textofObjectNodeWithoutEmptyCheck;\r\n    }\r\n\r\n    parse(jObj: any) {\r\n        if (Array.isArray(jObj) && this.options.rootNodeName && this.options.rootNodeName.length > 1) {\r\n            jObj = {\r\n                [this.options.rootNodeName]: jObj\r\n            };\r\n        }\r\n        return this.j2x(jObj, 0).val;\r\n    }\r\n\r\n    j2x(jObj: any, level: number) {\r\n        let attrStr: string[] = [];\r\n        let val = '';\r\n        for (let key in jObj) {\r\n            const keyVal = jObj[key];\r\n\r\n            if (typeof keyVal === 'undefined') {\r\n                // supress undefined node\r\n            }\r\n            else if (keyVal === null) {\r\n                val += `${this.indentate(level)}<${key}/${this.tagEndChar}`;\r\n            }\r\n            else if (keyVal instanceof Date) {\r\n                val += this.textofTextValNode(keyVal as any, key, [], level);\r\n            }\r\n            else if (typeof keyVal !== 'object') {\r\n                //premitive type\r\n                const attr = this.isAttribute(key);\r\n                if (attr) {\r\n                    attrStr.push(`${attr}=\"${this.options.attrValueProcessor(keyVal, attr as string)}\"`);\r\n                }\r\n                else if (this.isCDATA(key)) {\r\n                    if (jObj[this.options.textNodeName]) {\r\n                        val += this.replaceCDATAstr(jObj[this.options.textNodeName], keyVal);\r\n                    } else {\r\n                        val += this.replaceCDATAstr('', keyVal);\r\n                    }\r\n                } else {\r\n                    //tag value\r\n                    if (key === this.options.textNodeName) {\r\n                        if (jObj[this.options.cdataTagName]) { //tm: this will not work\r\n                            //value will added while processing cdata\r\n                        } else {\r\n                            val += this.options.tagValueProcessor(keyVal);\r\n                        }\r\n                    } else {\r\n                        val += this.textofTextValNode(keyVal, key, [], level);\r\n                    }\r\n                }\r\n            }\r\n            else if (Array.isArray(keyVal)) {\r\n                //repeated nodes\r\n                if (this.isCDATA(key)) {\r\n                    val += this.indentate(level);\r\n                    if (jObj[this.options.textNodeName]) {\r\n                        val += this.replaceCDATAarr(jObj[this.options.textNodeName], keyVal);\r\n                    } else {\r\n                        val += this.replaceCDATAarr('', keyVal);\r\n                    }\r\n                } else {\r\n                    //nested nodes\r\n                    const arrLen = keyVal.length;\r\n                    for (let j = 0; j < arrLen; j++) {\r\n                        const item = keyVal[j];\r\n                        if (typeof item === 'undefined') {\r\n                            // supress undefined node\r\n                        } else if (item === null) {\r\n                            val += `${this.indentate(level)}<${key}/${this.tagEndChar}`;\r\n                        } else if (typeof item === 'object') {\r\n                            val += this.processTextOrObjNode(item, key, level);\r\n                        } else {\r\n                            val += this.textofTextValNode(item, key, [], level);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                //nested node\r\n                if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\r\n                    const Ks = Object.keys(keyVal);\r\n                    const L = Ks.length;\r\n                    for (let j = 0; j < L; j++) {\r\n                        const attrName = Ks[j];\r\n                        attrStr.push(`${attrName}=\"${this.options.attrValueProcessor(keyVal[attrName], attrName)}\"`);\r\n                    }\r\n                } else {\r\n                    val += this.processTextOrObjNode(keyVal, key, level);\r\n                }\r\n            }\r\n        }\r\n        return { attrStr: attrStr, val: val };\r\n    };\r\n\r\n    processTextOrObjNode(this: J2xParser, object: any, key: string, level: number): string {\r\n        const result = this.j2x(object, level + 1);\r\n        if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\r\n            return this.textofTextValNode(result.val, key, result.attrStr, level);\r\n        } else {\r\n            return this.textofObjectNode(result.val, key, result.attrStr, level);\r\n        }\r\n    }\r\n\r\n    // Formatted output\r\n\r\n    _textofObjectNodeWithoutEmptyCheck(this: J2xParser, val: string, key: string, attrStr: string[], level: number): string {\r\n        const attrs = this.attrsToStr(attrStr, level);\r\n        const reduce = this.options.doAttrsIndent && !val;\r\n        const front = reduce ? this.options.doAttrsEndingIndent ? `${this.newLine}${this.indentate(level)}/${this.tagEndChar}` : ` /${this.tagEndChar}` : '';\r\n        const doEmpty = this.options.doReduceEmptyValues && !val;\r\n        let ending;\r\n        if (attrStr.length && val.indexOf('<') === -1) {\r\n            ending = reduce ? front : doEmpty ? ` /${this.tagEndChar}` : `>${val}</${key}${this.tagEndChar}`;\r\n        } else {\r\n            ending = reduce ? front : doEmpty ? ` /${this.tagEndChar}` : `${this.tagEndChar}${val}${this.indentate(level)}</${key}${this.tagEndChar}`;\r\n        }\r\n        return `${this.indentate(level)}<${key}${attrs}${ending}`;\r\n    }\r\n\r\n    _textofTextValNodeWithoutEmptyCheck(this: J2xParser, val: string, key: string, attrStr: string[], level: number): string {\r\n        const attrs = this.attrsToStr(attrStr, level);\r\n        const reduce = this.options.doAttrsIndent && !val;\r\n        const front = reduce ? this.options.doAttrsEndingIndent ? `${this.newLine}${this.indentate(level)}/${this.tagEndChar}` : ` /${this.tagEndChar}` : '';\r\n        const clearVal = this.options.tagValueProcessor(val);\r\n        const doEmpty = this.options.doReduceEmptyValues && !clearVal;\r\n        const ending = reduce ? front : doEmpty ? ` /${this.tagEndChar}` : `>${clearVal}</${key}${this.tagEndChar}`;\r\n        return `${this.indentate(level)}<${key}${attrs}${ending}`;\r\n    }\r\n\r\n    // Empty guards\r\n\r\n    _textofObjNode(this: J2xParser, val: string, key: string, attrStr: string[], level: number): string {\r\n        if (val !== '') {\r\n            return this._textofObjectNodeWithoutEmptyCheck(val, key, attrStr, level);\r\n        } else {\r\n            const attrs = this.attrsToStr(attrStr, level);\r\n            return `${this.indentate(level)}<${key}${attrs}/${this.tagEndChar}`; //+ this.newLine\r\n        }\r\n    }\r\n\r\n    _textofTextNode(this: J2xParser, val: string, key: string, attrStr: string[], level: number): string {\r\n        if (val !== '') {\r\n            return this._textofTextValNodeWithoutEmptyCheck(val, key, attrStr, level);\r\n        } else {\r\n            const attrs = this.attrsToStr(attrStr, level);\r\n            return `${this.indentate(level)}<${key}${attrs}/${this.tagEndChar}`;\r\n        }\r\n    }\r\n\r\n    attrsToStr(attrs: string[], level: number): string {\r\n        const indent = this.indentate(level + 1);\r\n        return attrs.map(attr => this.options.doAttrsIndent ? `\\n${indent}${attr}` : ` ${attr}`).join('');\r\n    }\r\n\r\n} //class J2xParser\r\n\r\n// replace CDATA\r\n\r\nfunction _replaceCDATAstr(this: J2xParser, str: string, cdata: string): string {\r\n    str = this.options.tagValueProcessor(str);\r\n    if (this.options.cdataPositionChar === '' || str === '') {\r\n        return `${str}<![CDATA[${cdata}]]${this.tagEndChar}`;\r\n    } else {\r\n        return str.replace(this.options.cdataPositionChar, `<![CDATA[${cdata}]]${this.tagEndChar}`);\r\n    }\r\n}\r\n\r\nfunction _replaceCDATAarr(this: J2xParser, str: string, cdata: any): string {\r\n    str = this.options.tagValueProcessor(str);\r\n    if (this.options.cdataPositionChar === '' || str === '') {\r\n        return `${str}<![CDATA[${cdata.join(']]><![CDATA[')}]]${this.tagEndChar}`;\r\n    } else {\r\n        for (let v in cdata) {\r\n            str = str.replace(this.options.cdataPositionChar, `<![CDATA[${cdata[v]}]]>`);\r\n        }\r\n        return str + this.newLine;\r\n    }\r\n}\r\n\r\n// Misc\r\n\r\nfunction isAttribute(this: J2xParser, name: string /*, options*/): string | false {\r\n    if (name.startsWith(this.options.attributeNamePrefix)) {\r\n        return name.substr(this.attrPrefixLen);\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction isCDATA(this: J2xParser, name: string): boolean {\r\n    return name === this.options.cdataTagName;\r\n}\r\n\r\nfunction indentate(this: J2xParser, level: number): string {\r\n    return this.options.indentBy.repeat(level);\r\n}\r\n\r\n//formatting - done\r\n//indentation - done\r\n//\\n after each closing or self closing tag - done\r\n","import { Mani } from \"../mani-types\";\r\nimport { parseOptionsRead } from \"./mani-i\";\r\nimport { showError } from \"./mani-show-error\";\r\nimport { TransformEncoding } from \"../transforms\";\r\nimport { J2xParser } from \"../utils/json2xml\";\r\n\r\nexport const parseOptionsWrite = {\r\n    ...parseOptionsRead,\r\n    format: true,\r\n    indentBy: '\\t',\r\n    attrValueProcessor: (attrValue: string | any, attrName: string): string => {\r\n        const val =\r\n            typeof attrValue === 'string'\r\n                ? TransformEncoding.xmlEscape(attrValue)\r\n                : typeof attrValue === 'boolean'\r\n                    ? attrValue ? '1' : '0'\r\n                    : attrValue; //console.log(`    ${attrName} = ${val}`);\r\n        return val;\r\n    }\r\n};\r\n\r\nconst ATTRS: string = \"_attributes\";\r\n\r\nfunction hasKeys(obj?: object): boolean {\r\n    return !!obj && !!Reflect.ownKeys(obj).length;\r\n}\r\n\r\nfunction makeNewManifest4Xml(mani: Mani.Manifest): Mani.Manifest {\r\n    const { options, descriptor, forms, ...rest } = mani;\r\n\r\n    let rv: any = { manifest: {}, };\r\n\r\n    // 1. Customization\r\n    if (options) {\r\n        const { processes, ...rest } = options;\r\n        const xmlProcesses = processes?.length && { processes: { process: processes.map((process) => ({ [ATTRS]: process })) } };\r\n        rv.manifest.options = { ...xmlProcesses, ...rest, };\r\n    }\r\n\r\n    // 2. Manifest descriptor\r\n    if (hasKeys(descriptor)) {\r\n        rv.manifest.descriptor = { [ATTRS]: descriptor };\r\n    }\r\n\r\n    // 3. Manifest forms\r\n    if (forms?.length) {\r\n        rv.manifest.forms = {\r\n            form: forms.map((form) => {\r\n                const { fcontext, detection, options, fields, ...rest } = form;\r\n                return {\r\n                    ...(hasKeys(fcontext) && { fcontext: { [ATTRS]: form.fcontext } }),\r\n                    ...(hasKeys(detection) && { detection: { [ATTRS]: form.detection } }),\r\n                    ...(hasKeys(options) && { options: { [ATTRS]: form.options } }),\r\n                    ...(fields?.length && { fields: { field: form.fields.map((field) => ({ [ATTRS]: field })) } }),\r\n                    ...rest,\r\n                };\r\n            })\r\n        };\r\n    }\r\n\r\n    return { ...rv, ...rest, };\r\n}\r\n\r\nexport function makeXML(mani: Mani.Manifest | undefined): string | undefined {\r\n    let rv = mani && makeNewManifest4Xml(mani);\r\n    if (rv) {\r\n        try {\r\n            const j2xParser = new J2xParser(parseOptionsWrite);\r\n            const xml = j2xParser.parse(rv);\r\n            return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n${xml}`;\r\n        } catch (error) {\r\n            showError(error);\r\n        }\r\n    }\r\n}\r\n\r\n//TODO: attrValueProcessor(): convert value life and skip '=== undefined'\r\n","//#region trivial URL\r\n/*\r\n    // https://github.com/websanova/js-url <- has no npm deployment; 2.5.3; was released on Apr 5, 2018\r\n    url();            // http://rob:abcd1234@www.example.co.uk/path/index.html?query1=test&silly=willy&field[0]=zero&field[2]=two#test=hash&chucky=cheese\r\n    url('tld');       // co.uk\r\n    url('domain');    // example.co.uk\r\n    url('hostname');  // www.example.co.uk\r\n    url('sub');       // www\r\n    url('.0')         // undefined\r\n    url('.1')         // www\r\n    url('.2')         // example\r\n    url('.-1')        // uk\r\n    url('auth')       // rob:abcd1234\r\n    url('user')       // rob\r\n    url('pass')       // abcd1234\r\n    url('port');      // 80\r\n    url('protocol');  // http\r\n    url('path');      // /path/index.html\r\n    url('file');      // index.html\r\n    url('filename');  // index\r\n    url('fileext');   // html\r\n    url('1');         // path\r\n    url('2');         // index.html\r\n    url('3');         // undefined\r\n    url('-1');        // index.html\r\n    url(1);           // path\r\n    url(2);           // index.html\r\n    url(-1);          // index.html\r\n    url('query');     // query1=test&silly=willy\r\n    url('?');         // {query1: 'test', silly: 'willy', field: ['zero', undefined, 'two']}\r\n    url('?silly');    // willy\r\n    url('?poo');      // undefined\r\n    url('field[0]')   // zero\r\n    url('field')      // ['zero', undefined, 'two']\r\n    url('hash');      // test=hash&chucky=cheese\r\n    url('#');         // {test: 'hash', chucky: 'cheese'}\r\n    url('#chucky');   // cheese\r\n    url('#poo');      // undefined\r\n*/\r\n/*\r\n    Uniform Resource Identifier (Uri) http://tools.ietf.org/html/rfc3986.\r\n    This class is a simple parser which creates the basic component parts\r\n    (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\r\n    and encoding.\r\n    https://github.com/Microsoft/monaco-editor/blob/3acd0a1/monaco.d.ts#L83\r\n\r\n        foo://example.com:8042/over/there?name=ferret#nose\r\n        \\_/   \\______________/\\_________/ \\_________/ \\__/\r\n        |           |            |            |        |\r\n        scheme     authority       path        query   fragment\r\n        |   _____________________|__\r\n        / \\ /                        \\\r\n        urn:example:animal:ferret:nose\r\n*/\r\n\r\ninterface IUrlParts {\r\n    protocol?: string;\r\n    email?: string;\r\n    hash?: string;\r\n    query?: string;\r\n    path?: string;\r\n    //file?: string;\r\n    //filename?: string;\r\n    //fileext?: string;\r\n    port?: string;\r\n    auth?: string;\r\n    user?: string;\r\n    pass?: string;\r\n    hostname?: string;\r\n    tld?: string;\r\n    domain?: string;\r\n    sub?: string;\r\n    domainhost?: string; // combination of domain or host name if domain is missing\r\n    //queries\r\n    //\"tld?\"?: string;\r\n    //\"?\"?: string;\r\n    //\"#\"?: string;\r\n    //\".\"?: string;\r\n    //\"{}\"?: string;\r\n}\r\n\r\ntype IUrlKeys = keyof IUrlParts;\r\n\r\nexport namespace tmurl {\r\n\r\n    const _t = new RegExp(/(.*?)\\.?([^\\.]*?)\\.(gl|com|net|org|biz|ws|in|me|co\\.uk|co|org\\.uk|ltd\\.uk|plc\\.uk|me\\.uk|edu|mil|br\\.com|cn\\.com|eu\\.com|hu\\.com|no\\.com|qc\\.com|sa\\.com|se\\.com|se\\.net|us\\.com|uy\\.com|ac|co\\.ac|gv\\.ac|or\\.ac|ac\\.ac|af|am|as|at|ac\\.at|co\\.at|gv\\.at|or\\.at|asn\\.au|com\\.au|edu\\.au|org\\.au|net\\.au|id\\.au|be|ac\\.be|adm\\.br|adv\\.br|am\\.br|arq\\.br|art\\.br|bio\\.br|cng\\.br|cnt\\.br|com\\.br|ecn\\.br|eng\\.br|esp\\.br|etc\\.br|eti\\.br|fm\\.br|fot\\.br|fst\\.br|g12\\.br|gov\\.br|ind\\.br|inf\\.br|jor\\.br|lel\\.br|med\\.br|mil\\.br|net\\.br|nom\\.br|ntr\\.br|odo\\.br|org\\.br|ppg\\.br|pro\\.br|psc\\.br|psi\\.br|rec\\.br|slg\\.br|tmp\\.br|tur\\.br|tv\\.br|vet\\.br|zlg\\.br|br|ab\\.ca|bc\\.ca|mb\\.ca|nb\\.ca|nf\\.ca|ns\\.ca|nt\\.ca|on\\.ca|pe\\.ca|qc\\.ca|sk\\.ca|yk\\.ca|ca|cc|ac\\.cn|com\\.cn|edu\\.cn|gov\\.cn|org\\.cn|bj\\.cn|sh\\.cn|tj\\.cn|cq\\.cn|he\\.cn|nm\\.cn|ln\\.cn|jl\\.cn|hl\\.cn|js\\.cn|zj\\.cn|ah\\.cn|gd\\.cn|gx\\.cn|hi\\.cn|sc\\.cn|gz\\.cn|yn\\.cn|xz\\.cn|sn\\.cn|gs\\.cn|qh\\.cn|nx\\.cn|xj\\.cn|tw\\.cn|hk\\.cn|mo\\.cn|cn|cx|cz|de|dk|fo|com\\.ec|tm\\.fr|com\\.fr|asso\\.fr|presse\\.fr|fr|gf|gs|co\\.il|net\\.il|ac\\.il|k12\\.il|gov\\.il|muni\\.il|ac\\.in|co\\.in|org\\.in|ernet\\.in|gov\\.in|net\\.in|res\\.in|is|it|ac\\.jp|co\\.jp|go\\.jp|or\\.jp|ne\\.jp|ac\\.kr|co\\.kr|go\\.kr|ne\\.kr|nm\\.kr|or\\.kr|li|lt|lu|asso\\.mc|tm\\.mc|com\\.mm|org\\.mm|net\\.mm|edu\\.mm|gov\\.mm|ms|nl|no|nu|pl|ro|org\\.ro|store\\.ro|tm\\.ro|firm\\.ro|www\\.ro|arts\\.ro|rec\\.ro|info\\.ro|nom\\.ro|nt\\.ro|se|si|com\\.sg|org\\.sg|net\\.sg|gov\\.sg|sk|st|tf|ac\\.th|co\\.th|go\\.th|mi\\.th|net\\.th|or\\.th|tm|to|com\\.tr|edu\\.tr|gov\\.tr|k12\\.tr|net\\.tr|org\\.tr|com\\.tw|org\\.tw|net\\.tw|ac\\.uk|uk\\.com|uk\\.net|gb\\.com|gb\\.net|vg|sh|kz|ch|info|ua|gov|name|pro|ie|hk|com\\.hk|org\\.hk|net\\.hk|edu\\.hk|us|tk|cd|by|ad|lv|eu\\.lv|bz|es|jp|cl|ag|mobi|eu|co\\.nz|org\\.nz|net\\.nz|maori\\.nz|iwi\\.nz|io|la|md|sc|sg|vc|tw|travel|my|se|tv|pt|com\\.pt|edu\\.pt|asia|fi|com\\.ve|net\\.ve|fi|org\\.ve|web\\.ve|info\\.ve|co\\.ve|tel|im|gr|ru|net\\.ru|org\\.ru|hr|com\\.hr|ly|xyz)$/);\r\n\r\n    /*\r\n    function _i(arg: string, str: string): string | string[] {\r\n        var sptr = arg.charAt(0),\r\n            split = str.split(sptr);\r\n\r\n        if (sptr === arg) { return split; }\r\n\r\n        let arg2 = parseInt(arg.substring(1), 10);\r\n\r\n        return split[arg2 < 0 ? split.length + arg2 : arg2 - 1];\r\n    }\r\n    */\r\n\r\n    /*\r\n    function _d(s: string) {\r\n      return decodeURIComponent(s.replace(/\\+/g, ' '));\r\n    }\r\n\r\n    function _f(arg: string, str: string) {\r\n        var sptr = arg.charAt(0),\r\n            split = str.split('&'),\r\n            field = [] as any[] | null,\r\n            params = {} as any,\r\n            tmp = [],\r\n            arg2 = arg.substring(1);\r\n\r\n        for (var i = 0, ii = split.length; i < ii; i++) {\r\n            field = split[i].match(/(.*?)=(.*)/);\r\n\r\n            // TODO: regex should be able to handle this.\r\n            if ( ! field) {\r\n                field = [split[i], split[i], ''];\r\n            }\r\n\r\n            if (field[1].replace(/\\s/g, '') !== '') {\r\n                field[2] = _d(field[2] || '');\r\n\r\n                // If we have a match just return it right away.\r\n                if (arg2 === field[1]) { return field[2]; }\r\n\r\n                // Check for array pattern.\r\n                tmp = field[1].match(/(.*)\\[([0-9]+)\\]/);\r\n\r\n                if (tmp) {\r\n                    params[tmp[1]] = params[tmp[1]] || [];\r\n\r\n                    params[tmp[1]][tmp[2]] = field[2];\r\n                }\r\n                else {\r\n                    params[field[1]] = field[2];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (sptr === arg) { return params; }\r\n\r\n        return params[arg2];\r\n    }\r\n    */\r\n\r\n    export function url(url: string/*, arg?: IUrlKeys*/): IUrlParts { //: IUrlResult | string | string[] | RegExp | undefined\r\n        var _l: IUrlParts = {},\r\n            tmp;\r\n\r\n        //if (arg === 'tld?') { return _t; }\r\n\r\n        if (!url) { //!url - includes undefined and 0 length //url = url || ''; // tm: url = url || window.location.toString();\r\n            return _l;\r\n        }\r\n\r\n        //if (!arg) { return url; }\r\n\r\n        //arg = arg.toString() as IUrlKeys;\r\n\r\n        if (tmp = url.match(/^mailto:([^\\/].+)/)) {\r\n            _l.protocol = 'mailto';\r\n            _l.email = tmp[1];\r\n        } else {\r\n            // Ignore Hashbangs.\r\n            if (tmp = url.match(/(.*?)\\/#\\!(.*)/)) {\r\n                url = tmp[1] + tmp[2];\r\n            }\r\n\r\n            // Hash.\r\n            if (tmp = url.match(/(.*?)#(.*)/)) {\r\n                _l.hash = tmp[2];\r\n                url = tmp[1];\r\n            }\r\n\r\n            // Return hash parts.\r\n            //if (_l.hash && arg.match(/^#/)) { return _f(arg, _l.hash); }\r\n\r\n            // Query\r\n            if (tmp = url.match(/(.*?)\\?(.*)/)) {\r\n                _l.query = tmp[2];\r\n                url = tmp[1];\r\n            }\r\n\r\n            // Return query parts.\r\n            //if (_l.query && arg.match(/^\\?/)) { return _f(arg, _l.query); }\r\n\r\n            // Protocol.\r\n            if (tmp = url.match(/(.*?)\\:?\\/\\/(.*)/)) {\r\n                _l.protocol = tmp[1].toLowerCase();\r\n                url = tmp[2];\r\n            }\r\n\r\n            // Path.\r\n            if (tmp = url.match(/(.*?)(\\/.*)/)) {\r\n                _l.path = tmp[2];\r\n                url = tmp[1];\r\n            }\r\n\r\n            // Clean up path.\r\n            _l.path = (_l.path || '').replace(/^([^\\/])/, '/$1');\r\n\r\n            // Return path parts.\r\n            //if (arg.match(/^[\\-0-9]+$/)) { arg = arg.replace(/^([^\\/])/, '/$1') as IUrlKeys; }\r\n            //if (arg.match(/^\\//)) { return _i(arg, _l.path.substring(1)); }\r\n\r\n            // File.\r\n            /*\r\n            tmp = _i('/-1', _l.path.substring(1));\r\n\r\n            if (tmp && (tmp = (tmp as string).match(/(.*?)\\.([^.]+)$/))) {\r\n                _l.file = tmp[0];\r\n                _l.filename = tmp[1];\r\n                _l.fileext = tmp[2];\r\n            }\r\n            */\r\n\r\n            // Port.\r\n            if (tmp = url.match(/(.*)\\:([0-9]+)$/)) {\r\n                _l.port = tmp[2];\r\n                url = tmp[1];\r\n            }\r\n\r\n            // Auth.\r\n            if (tmp = url.match(/(.*?)@(.*)/)) {\r\n                _l.auth = tmp[1];\r\n                url = tmp[2];\r\n            }\r\n\r\n            // User and pass.\r\n            if (_l.auth) {\r\n                tmp = _l.auth.match(/(.*)\\:(.*)/);\r\n                _l.user = tmp ? tmp[1] : _l.auth;\r\n                _l.pass = tmp ? tmp[2] : undefined;\r\n            }\r\n\r\n            // Hostname.\r\n            _l.hostname = url.toLowerCase();\r\n\r\n            // Return hostname parts.\r\n            //if (arg.charAt(0) === '.') { return _i(arg, _l.hostname); }\r\n\r\n            // Domain, tld and sub domain.\r\n            if (tmp = _l.hostname.match(_t)) {\r\n                _l.tld = tmp[3];\r\n                _l.domain = tmp[2] ? tmp[2] + '.' + tmp[3] : undefined;\r\n                _l.sub = tmp[1] || undefined;\r\n            }\r\n\r\n            _l.domainhost = _l.domain || _l.hostname;\r\n\r\n            // Set port and protocol defaults if not set.\r\n            //_l.port = _l.port || (_l.protocol === 'https' ? '443' : '80');\r\n            //_l.protocol = _l.protocol || (_l.port === '443' ? 'https' : 'http');\r\n        }\r\n\r\n        return _l; //return arg ? _l[arg] : _l;\r\n\r\n        // Return everything.\r\n        //if (!arg) { return _l; }\r\n\r\n        // Return arg.\r\n        //if (arg in _l) { return _l[arg]; }\r\n        //return _l[arg];\r\n\r\n        // Default to undefined for no match.\r\n        //return undefined;\r\n    } //url()\r\n}//namespace tmurl\r\n\r\nexport function urlDomain(url: string): string {\r\n    // 0. DP manual mode and win32 apps don't have url, but Navi sent these manifests anyway. 'fake.domain' returned for all empty strings.\r\n    let u = url ? (tmurl.url(url) as IUrlParts) : {};   //TODO: This can be regex and tmurl.url() will fail.\r\n    return u.domain || u.hostname || u.path || '';      // path is specified for 'file' protocol.\r\n}\r\n\r\nexport function removeQuery(url: string | undefined): string {\r\n    return (url || '').split('?')[0].split('#')[0];\r\n}\r\n","export const startTime = Date.now();\r\n\r\nfunction now(): number {\r\n    const timeNow = Date.now();\r\n    const last = (now as any).last || timeNow;\r\n    return (now as any).last = timeNow > last ? timeNow : last + 1;\r\n}\r\n\r\nfunction asNumber(): number {\r\n    return now();\r\n}\r\n\r\nfunction asRelativeNumber(): number {\r\n    return now() - startTime;\r\n}\r\n\r\nexport function uuid(short?: boolean): string {\r\n    let n = now();\r\n    if (short) {\r\n        n -= startTime;\r\n    }\r\n    return n.toString(36);\r\n}\r\n\r\nuuid.asNumber = asNumber;\r\nuuid.asRelativeNumber = asRelativeNumber;\r\n","import { Catalog, FieldCatalog, Mani, Meta, fieldTyp4Str } from '../mani-types';\r\nimport { getPool } from '../transforms/transform-mani-pool';\r\nimport { TransformValue } from '../transforms/transform-valuelife';\r\nimport { FieldPath } from '../transforms/transform-path';\r\nimport { removeQuery, urlDomain } from '../transforms/url';\r\nimport { uuid } from '../utils';\r\n\r\nnamespace Bailouts {\r\n    function noSIDs(meta: Meta.Form) { // web, not script, use it, no sid, and not button; scuonlinebanking.com clogin #89340\r\n        return !!meta.disp.domain && !meta.disp.isScript &&\r\n            !!meta.fields.find((field: Meta.Field) => field.mani.useit && !field.path.sid && field.mani.type !== 'button');\r\n    }\r\n\r\n    export function getBailouts(meta: Meta.Form): string[] | undefined {\r\n        const rv: string[] = [];\r\n        if (meta.disp.isIe && !meta.disp.domain) {\r\n            rv.push(\"IE website form without site domain\");\r\n        }\r\n        if (meta.disp.isIe && meta.disp.isScript) {\r\n            rv.push(\"Manual mode manifest built for IE\");\r\n        };\r\n        if (noSIDs(meta)) {\r\n            rv.push(\"There are fields in the form without an ID. Check path that does not have SID.\"); // short: The form has fields with no ID\r\n        }\r\n        return rv.length ? rv : undefined;\r\n    }\r\n} //namespace Bailouts\r\n\r\nexport function buildManiMetaForms(mani: Mani.Manifest | undefined): Meta.Form[] {\r\n    const isManual = (fields: Meta.Field[]): boolean => {\r\n        return !!fields.length && fields.some(({ path }: { path: Meta.Path; }) => path.sn);\r\n    };\r\n    const isIeServer = (form: Mani.Form): boolean => {\r\n        return !!form.detection?.names_ext?.match(/Internet Explorer_Server/);\r\n    };\r\n    const isIeProcess = (form: Mani.Form): boolean => {\r\n        return !!form.detection?.processname?.match(/(iexplore|msedge|microsoftedgecp)\\.exe\"?$/i);\r\n    };\r\n    const createMetaForm = (form: Mani.Form, idx: number): Meta.Form => {\r\n        const pool: string[] = getPool(form) || [];\r\n        const fields: Meta.Field[] = (form.fields || []).map((field: Mani.Field, idx: number) => ({\r\n            mani: field,\r\n            ftyp: fieldTyp4Str(field),\r\n            life: TransformValue.valueLife4Mani(field),\r\n            path: FieldPath.fieldPathItems(pool, field.path_ext || ''),\r\n            pidx: idx,\r\n            ridx: 0,\r\n        }));\r\n        const domain = urlDomain(removeQuery(form.detection?.web_ourl));\r\n        const isScript = isManual(fields);\r\n        const isIe = isIeServer(form) || isIeProcess(form);\r\n        const meta: Meta.Form = {\r\n            mani: form,\r\n            type: idx,\r\n            disp: {\r\n                domain,\r\n                isScript,\r\n                noFields: !fields.length,\r\n                isIe,\r\n            },\r\n            pool: pool,\r\n            view: FieldPath.loc.utils.buildPreviewData(fields),\r\n            fields,\r\n            rother: [],\r\n        };\r\n        const bailOuts = Bailouts.getBailouts(meta);\r\n        if (bailOuts) {\r\n            meta.disp.bailOut = bailOuts;\r\n        }\r\n        return meta;\r\n    };\r\n    const forms: Meta.Form[] = !mani || !mani.forms || !mani.forms.length ? [] : mani.forms.map(createMetaForm);\r\n    [0, 1].forEach((type: number) => { // build xlinks\r\n        if (forms[type]) {\r\n            forms[type].rother = forms[type === 0 ? 1 : 0]?.fields.map((field) => field.ridx) || [];\r\n        }\r\n    });\r\n    return forms;\r\n}\r\n\r\n// Field catalog transformation\r\n\r\nexport function buildCatalogMetaFromNames(names: Catalog.Name[] | undefined): FieldCatalog {\r\n    const items = names?.map((item, idx) => {\r\n        const now = uuid.asRelativeNumber();\r\n        return { ...item, index: idx, uuid: now, mru: now, };\r\n    }) || [];\r\n    return {\r\n        items,\r\n    };\r\n}\r\n\r\nexport function buildCatalogMeta(fcat: Catalog.Root | undefined): FieldCatalog {\r\n    //TODO: handle addtional info\r\n    return buildCatalogMetaFromNames(fcat?.names);\r\n}\r\n\r\n// TODO: bailOut: add more checks and explanation why there are issues on each check.\r\n"],"names":["Mani","FORMNAME","LIST_valueAskNames","LIST_references","txt","name","i","f","s","upnname","fullname","domain","psw","password","FieldTyp","TransformValue","TransformEncoding","TimeUtils","FieldPath","fieldTyp4Str","field","rv","type","und","edit","getPool","form","detection","names_ext","split","getPoolName","pool","index","n","parseInt","length","removeEscapeChars","valueLife4ManiLogic","askalways","onetvalue","value","fType","vl","valueAs","isPsw","isRef","charAt","replace","valueLife2ManiLogic","va","undefined","valueLife4Mani","valueLife4Catalog","item","valueLife2Mani","swapKeyValPairs","obj","Object","fromEntries","entries","map","key","val","escapeChar","forwardCpp","reverseCpp","reForwardCpp","reReverseCpp","cppRestore","m","cppEscape","colonEscape","forwardXml","reverseXml","reForwardXml","reReverseXml","xmlRestore","xmlEscape","persentRemove","decodeURI","error","dpTimeToShow","fileTime","d","Number","join","Date","fileTimeToDate","toLocaleString","exec","forEach","idx","v","total","slice","loc","loc_1","str2loc","x","y","x2","y2","str","w","h","loc2str","unPool","utils","rectsBoundaries","rects","x1","MAX_SAFE_INTEGER","y1","buildPreviewData","fields","uniqueLocs","Set","fieldLocs","path","add","ridx","Array","from","filter","bounds","rectStrs","findIndex","locStr","fieldPathItems","Boolean","getChunks","chunkName","chunkValue","p4a","_","ss","rnumber","roleString","className","sid","version","generatedId","formName","formAttrs","outerHtml","did2","sn","current","parts","first","console","log","nameStartChar","nameRegexp","regexName","RegExp","exports","isExist","isEmptyObject","keys","merge","target","a","arrayMode","len","getValue","isName","string","match","getAllMatches","regex","matches","allmatches","startIndex","lastIndex","push","util","require$$0","defaultOptions","allowBooleanAttributes","unpairedTags","isWhiteSpace","char","readPI","xmlData","start","tagname","substr","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","validator","validate","options","assign","tags","tagFound","reachedRoot","err","tagStartPos","closingTag","tagName","trim","substring","msg","result","readAttributeStr","attrStr","attrStrStart","isValid","validateAttributeString","code","line","tagClosed","otg","pop","openPos","col","indexOf","afterAmp","validateAmpersand","JSON","stringify","t","doubleQuote","singleQuote","startChar","validAttrStrRegxp","attrNames","getPositionFromMatch","attrName","validateAttrName","hasOwnProperty","re","validateNumberAmpersand","count","message","lineNumber","lines","preserveOrder","attributeNamePrefix","attributesGroupName","textNodeName","ignoreAttributes","removeNSPrefix","parseTagValue","parseAttributeValue","trimValues","cdataPropName","numberParseOptions","hex","leadingZeros","eNotation","tagValueProcessor","attributeValueProcessor","stopNodes","alwaysCreateTextNode","isArray","commentPropName","processEntities","htmlEntities","ignoreDeclaration","ignorePiTags","transformTagName","transformAttributeName","updateTag","jPath","attrs","OptionsBuilder","buildOptions","xmlNode","constructor","this","child","addChild","node","readEntityExp","entityName","Error","isComment","isEntity","isElement","isAttlist","isNotation","validateEntityName","DocTypeReader","entities","hasBody","comment","exp","regx","hexRegex","numRegex","window","parseFloat","consider","decimalPoint","require$$1","readDocType","require$$2","toNumber","trimmedStr","skipLike","test","sign","numTrimmedByZeros","numStr","trimZeros","num","search","addExternalEntities","externalEntities","entKeys","ent","lastEntities","parseTextData","dontTrim","hasAttributes","isLeafNode","escapeEntities","replaceEntitiesValue","newval","parseValue","resolveNameSpace","prefix","attrsRegx","buildAttributesMap","oldVal","aName","newVal","attrCollection","parseXml","xmlObj","currentNode","textData","closeIndex","findClosingIndex","colonIndex","saveTextToParentTag","lastTagName","lastIndexOf","propIndex","tagsNodeStack","tagData","readTagExp","childNode","tagExp","attrExpPresent","endIndex","docTypeEntities","lastTag","isItStopNode","tagContent","readStopNodeData","entity","ampEntity","currentTagName","allNodesExp","stopNodePath","stopNodeExp","errMsg","closingIndex","closingChar","attrBoundary","ch","data","tagExpWithClosingIndex","separatorIndex","openTagCount","shouldParse","OrderedObjParser_1","apos","gt","lt","quot","space","cent","pound","yen","euro","copyright","reg","inr","compress","arr","text","compressedObj","tagObj","property","propName","newJpath","isLeaf","isLeafTag","assignAttributes","attrMap","jpath","atrrName","propCount","node2json","prettify","OrderedObjParser","require$$3","XMLParser_1","parse","validationOption","toString","orderedObjParser","orderedResult","addEntity","arrToStr","indentation","xmlStr","isPreviousElementTag","newJPath","tagText","isStopNode","attStr","attr_to_str","tempInd","piTextNodeName","newIdentation","indentBy","tagStart","tagValue","suppressUnpairedNode","suppressEmptyNode","endsWith","includes","attr","attrVal","suppressBooleanAttributes","textValue","buildFromOrderedJs","jArray","format","oneListGroup","Builder","isAttribute","attrPrefixLen","processTextOrObjNode","indentate","tagEndChar","newLine","object","level","j2x","buildTextValNode","buildObjectNode","repeat","startsWith","prototype","build","jObj","arrayNodeName","buildAttrPairStr","arrLen","listTagVal","j","Ks","L","closeTag","tagEndExp","piClosingChar","fxp","XMLParser","XMLValidator","XMLBuilder","beautifyXMLManifest","manifest","descriptor","_attributes","forms","fcontext","web_checkurl","submit","useit","rfieldindex","processes","process","beautifyXMLCatalog","catalog","names","parseOptionsRead","parseXMLFile","cnt","mani","fcat","storagecatalog","Matching","showError","Style","Options","reUrlMatchCheck","addPrefixRegex","reOtsMatching","getMatchRawData","murl","style","undef","opt","url","makeRawMatchData","ourl","getMatchInfo","raw","resOpt","resStyle","styleName","cdataTagName","cdataPositionChar","supressEmptyNode","attrValueProcessor","doReduceEmptyValues","doAttrsIndent","doAttrsEndingIndent","props","J2xParser","newOptions","isCDATA","replaceCDATAstr","_replaceCDATAstr","replaceCDATAarr","_replaceCDATAarr","textofTextValNode","_textofTextNode","_textofTextValNodeWithoutEmptyCheck","textofObjectNode","_textofObjNode","_textofObjectNodeWithoutEmptyCheck","rootNodeName","keyVal","attrsToStr","reduce","front","doEmpty","ending","clearVal","indent","cdata","parseOptionsWrite","attrValue","ATTRS","hasKeys","Reflect","ownKeys","makeXML","rest","xmlProcesses","makeNewManifest4Xml","j2xParser","tmurl","_t","tmp","_l","protocol","email","hash","query","toLowerCase","port","auth","user","pass","hostname","tld","sub","domainhost","startTime","now","timeNow","last","uuid","short","Bailouts","buildManiMetaForms","ftyp","life","path_ext","pidx","u","urlDomain","web_ourl","isScript","some","isManual","isIe","isIeServer","processname","isIeProcess","meta","disp","noFields","view","rother","bailOuts","getBailouts","bailOut","buildCatalogMetaFromNames","items","asRelativeNumber","mru","buildCatalogMeta","asNumber","find","noSIDs"],"mappings":"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","x_google_ignoreList":[6,7,8,9,10,11,12,13,14,15,16,17]}